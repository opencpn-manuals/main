#!/bin/bash
#
# Generate a new site.yml from template, using the list of plugins
# sources as defined in $plugins_dir/site.yml.
#
# Also update sources.state with matching data from
# $plugins_dir/sources.state.
#
# Normally, script clones the plugins project locally to get access to
# plugins/site.yml and plugins/sources.state. The environmant variable
# OCPN_PLUGINS_PATH can be used to override this; it is assumed to be
# the path to a local clone of https://github.com/opencpn-manuals/plugins.git
#

set -e

# Set up plugins_dir, our clone of the plugins project.
plugins_dir=$PWD/plugins
if [ -n "$OCPN_PLUGINS_PATH" ]; then
    plugins_dir="$OCPN_PLUGINS_PATH"
elif [ -d plugins ]; then
    cd plugins
    git remote update origin
    git rebase origin/main
    cd ..
else
    git clone --depth 1 https://github.com/opencpn-manuals/plugins.git
fi

# Extract the part between list-begin and list-end into plugins.list.tmp
sed -n '/@@plugin-list-begin/,/@@plugin-list-end/p' $plugins_dir/site.yml \
    | grep -v '@@' \
    > plugins.list.tmp


# Insert plugins.list.tmp into site.yml.in and generate site.yml
ed site.yml.in << EOF
/@@plugin-list
.r plugins.list.tmp
w site.yml
q
EOF

# Extract sources from url: lines and update corresponding line in sources.state
for source in $(sed -n '/ url:/s/.*sources/\./p' < plugins.list.tmp); do
    source=${source%/}             # Drop possible trailing '/'
    source=${source#./}            # Drop leading './'
    sed -i  -e "/^${source} /d" sources.state
    sed -n "/^${source}/p" $plugins_dir/sources.state >> sources.state
done

rm -f plugins.list.tmp
